from solution import solve_puzzle
import codewars_test as test

@test.describe("7x7 - fixed tests")
def _():
    @test.it("medium")
    def _():
        test.assert_equals(
        solve_puzzle([7,0,0,0,2,2,3, 0,0,3,0,0,0,0, 3,0,3,0,0,5,0, 0,0,0,0,5,0,4]),
        [ [1,5,6,7,4,3,2],
          [2,7,4,5,3,1,6],
          [3,4,5,6,7,2,1],
          [4,6,3,1,2,7,5],
          [5,3,1,2,6,4,7],
          [6,2,7,3,1,5,4],
          [7,1,2,4,5,6,3] ]
    );
    @test.it("hard")
    def _():
        test.assert_equals(
        solve_puzzle([6,4,0,2,0,0,3, 0,3,3,3,0,0,4, 0,5,0,5,0,2,0, 0,0,0,4,0,0,3]),
        [ [2,1,6,4,3,7,5],
          [3,2,5,7,4,6,1],
          [4,6,7,5,1,2,3],
          [1,3,2,6,7,5,4],
          [5,7,1,3,2,4,6],
          [6,4,3,2,5,1,7],
          [7,5,4,1,6,3,2] ]
    );
    @test.it("hard")
    def _():
        test.assert_equals(
        solve_puzzle([0,0,0,5,0,0,3, 0,6,3,4,0,0,0, 3,0,0,0,2,4,0, 2,6,2,2,2,0,0]),
        [ [3,5,6,1,7,2,4],
          [7,6,5,2,4,3,1],
          [2,7,1,3,6,4,5],
          [4,3,7,6,1,5,2],
          [6,4,2,5,3,1,7],
          [1,2,3,4,5,7,6],
          [5,1,4,7,2,6,3] ]
    );
    @test.it("very hard")
    def _():
        test.assert_equals(
        solve_puzzle([0,0,5,0,0,0,6, 4,0,0,2,0,2,0, 0,5,2,0,0,0,5, 0,3,0,5,0,0,3]),
        [ [3,4,1,7,6,5,2],
          [7,1,2,5,4,6,3],
          [6,3,5,2,1,7,4],
          [1,2,3,6,7,4,5],
          [5,7,6,4,2,3,1],
          [4,5,7,1,3,2,6],
          [2,6,4,3,5,1,7] ]
    );
    @test.it("very hard")
    def _():
        test.assert_equals(
        solve_puzzle([0,0,5,3,0,2,0, 0,0,0,4,5,0,0, 0,0,0,3,2,5,4, 2,2,0,0,0,0,5]),
        [ [2,3,1,4,6,5,7],
          [1,7,4,6,5,2,3],
          [3,6,5,7,2,1,4],
          [7,5,6,3,1,4,2],
          [6,2,7,5,4,3,1],
          [5,4,2,1,3,7,6],
          [4,1,3,2,7,6,5] ]
    );
    @test.it("very hard")
    def _():
        test.assert_equals(
        solve_puzzle([0,2,3,0,2,0,0, 5,0,4,5,0,4,0, 0,4,2,0,0,0,6, 5,2,2,2,2,4,1]),
        [ [7,6,2,1,5,4,3],
          [1,3,5,4,2,7,6],
          [6,5,4,7,3,2,1],
          [5,1,7,6,4,3,2],
          [4,2,1,3,7,6,5],
          [3,7,6,2,1,5,4],
          [2,4,3,5,6,1,7] ]
    );
    @test.it("<em>very</em> hard")
    def _():
        test.assert_equals(
        solve_puzzle([0,2,3,0,2,0,0, 5,0,4,5,0,4,0, 0,4,2,0,0,0,6, 0,0,0,0,0,0,0]),
        [ [7,6,2,1,5,4,3],
          [1,3,5,4,2,7,6],
          [6,5,4,7,3,2,1],
          [5,1,7,6,4,3,2],
          [4,2,1,3,7,6,5],
          [3,7,6,2,1,5,4],
          [2,4,3,5,6,1,7] ]
    );
    
    
@test.describe("random tests and Medved's")
def _():
    @test.it("random tests")
    def _():
          clues = [7,0,0,0,2,2,3,0,0,3,0,0,0,0,3,0,3,0,0,5,0,0,0,0,0,5,0,4]
          grid= [ [1,5,6,7,4,3,2],
                    [2,7,4,5,3,1,6],
                    [3,4,5,6,7,2,1],
                    [4,6,3,1,2,7,5],
                    [5,3,1,2,6,4,7],
                    [6,2,7,3,1,5,4],
                    [7,1,2,4,5,6,3] ]
          rotateClues_90 = lambda clues: clues[21:] + clues[:21]
          rotateGrid_90  = lambda g: [list(line)[::-1] for line in zip(*g)]
          dct = {}
          for n in range(3):
                clues = rotateClues_90(clues)
                grid = rotateGrid_90(grid)
                dct[n+1] = {"clues": clues[:], "grid": list(map(list, grid))}
          from random import shuffle
          rotations = [1,2,3]
          shuffle(rotations)
          for r in rotations:
                ans = solve_puzzle(dct[r]["clues"][:])
                expected = dct[r]["grid"]
                test.assert_equals(ans, expected)



    @test.it("medved")
    def _():
        test.assert_equals(
        solve_puzzle([3,3,2,1,2,2,3,
                      4,3,2,4,1,4,2,
                      2,4,1,4,5,3,2,
                      3,1,4,2,5,2,3 ]),
        [ [2,1,4,7,6,5,3],
          [6,4,7,3,5,1,2],
          [1,2,3,6,4,7,5],
          [5,7,6,2,3,4,1],
          [4,3,5,1,2,6,7],
          [7,6,2,5,1,3,4],
          [3,5,1,4,7,2,6] ]
    )
