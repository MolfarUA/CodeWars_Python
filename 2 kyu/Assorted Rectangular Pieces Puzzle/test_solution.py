#verify user solution
from re import sub as rrssub
def solution_validate(board,pieces,user_sol):
    def fail(s):
        test.expect(False,s)
        return False
    ln = len(board)
    ecaz = [[int(v) for v in rrssub(' ','1',x)] for x in board]
    if type(user_sol) != list:
        return fail('Invalid data type: Was expecting a list. Instead, got a {}.'.format(str(type(user_sol))[8:-2]))
    ln_user = len(user_sol)
    ln_pcs = len(pieces)
    if ln_user != ln_pcs:
        return fail('Invalid solution length: Your solution length must be {}. Your solution length is {}.'.format(ln_pcs,ln_user))
    for q,tmp in enumerate(user_sol):
        if type(tmp) != list or len(tmp) != 3 or not all([x is int(x) and x >= 0 for x in tmp]) or (tmp[2] is not 0 and tmp[2] is not 1):
            return fail('Invalid list element: list[{}] with a value of {}'.format(q,tmp))
        x,y,z = tmp
        h,w = pieces[q]
        if z:
            h,w = w,h
        if x+h > ln or y+w > ln:
            return fail('Piece {} is placed out of bounds at [{},{}] with orientation {}.'.format(q,x,y,z))
        for i in range(x,x+h):
            for j in range(y,y+w):
                if ecaz[i][j]:
                    return fail('Invalid solution: Overlap detected at [{},{}].'.format(i,j))
                ecaz[i][j] = 1
    if all([all([v is 1 for v in x]) for x in ecaz]):
        test.expect(True)
        return True

#fixed tests
test.describe('15 FIXED TESTS')
fixed_tests = [
    [
        [
            '     ',
            ' 00  ',
            ' 00  ',
            ' 00  ',
            '     '],[[2,3]]],
    [
        [
            '       0',
            ' 00   0 ',
            '      0 ',
            ' 0    0 ',
            ' 0    0 ',
            ' 0      ',
            '  00000 ',
            '        '],[[1,1],[1,2],[1,3],[1,4],[1,5]]],
    [
        [
            '       00 ',
            '00  00000 ',
            '000  00   ',
            '00   00   ',
            '000  00   ',
            '00   00   ',
            '000  00   ',
            '          ',
            '   0000000',
            ' 000      '],[[1,1],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,3],[1,7],[2,2],[2,6]]],
    [
        [
            '        ',
            ' 00 0   ',
            ' 00 00  ',
            '  0 00  ',
            '     00 ',
            '  00  0 ',
            '  00  0 ',
            '        '],
        [[1,1],[1,2],[1,2],[1,3],[1,3],[1,3],[2,2]]],
    [
        [
            '            ',
            ' 00000      ',
            ' 00000      ',
            ' 00000   00 ',
            '       000  ',
            '   00  000  ',
            ' 0000 00    ',
            ' 0000 00    ',
            ' 00   000 0 ',
            '   0  000 0 ',
            ' 000      0 ',
            '            '],
        [[1,1],[1,1],[1,2],[1,2],[1,2],[1,3],[1,3],[1,4],[1,4],[2,2],[2,2],[2,3],[2,3],[2,5]]],
    [
        [
            '          ',
            '          ',
            '  00  00  ',
            '  00  00  ',
            '          ',
            ' 0  00  0 ',
            ' 00    00 ',
            '  000000  ',
            '  000000  ',
            '          '],
        [[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,3],[1,3],[1,4],[2,2],[2,2]]],
    [
        [
            '            ',
            ' 0 0     0  ',
            '00000   00  ',
            ' 0 0  0000  ',
            '00000   00  ',
            ' 0 0    00  ',
            '        00  ',
            '        00  ',
            '        00  ',
            '        00  ',
            '      000000',
            '            '],
        [[1,1],[1,1],[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,3],[1,4],[2,2],[2,5]]],
    [
        [
            '             ',
            '             ',
            ' 0000    00  ',
            '000000  0000 ',
            '00     00  00',
            '00     00  00',
            '00 000 00  00',
            '00 000 00  00',
            '00  00 00  00',
            '000000  0000 ',
            ' 0000    00  ',
            '             ',
            '             '],
        [[1,1],[1,1],[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,3],[1,4],[1,4],[1,4],[1,4],[1,5],[2,2],[2,4],[2,5]]],
    [
        [
            '              ',
            '          000 ',
            '  00 00000000 ',
            '   0000 00000 ',
            '    00  00000 ',
            '    00     0  ',
            '  0 000000 0  ',
            ' 00000   000  ',
            ' 00000   00   ',
            '     0        ',
            '   00000000   ',
            '   00000000   ',
            '   00000000   ',
            '              '],
        [[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,3],[1,3],[1,4],[1,5],[1,6],[2,2],[2,2],[2,4],[3,4],[3,7]]],
    [
        [
            '00     000     ',
            ' 000           ',
            ' 000  0  0000  ',
            ' 000  00 00000 ',
            ' 000  00  0000 ',
            '  00  00     0 ',
            '  00  00  00000',
            '  00000000000  ',
            '   00    0     ',
            '   00  000 00  ',
            '       000  00 ',
            '       000  00 ',
            '        0    0 ',
            '            00 ',
            '            0  '],
        [[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,3],[1,3],[1,4],[1,4],[1,5],[1,8],[2,2],[2,2],[2,4],[3,3],[3,4]]],
    [
        [
            '     0          ',
            '     0      0   ',
            ' 00000   0  0   ',
            ' 0000     0000  ',
            ' 0000000000  0  ',
            ' 000000000  00  ',
            ' 0000000000000  ',
            ' 000000000000   ',
            '  00000000000   ',
            '   0000000   0  ',
            '    0  000   000',
            '           0    ',
            '        00 0    ',
            '     0000000    ',
            ' 000000    0 0  ',
            '00           0  '],
        [[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,3],[1,3],[1,4],[1,4],[1,6],[1,6],[2,2],[3,3],[4,6],[5,5]]],
    [
        [
            '   0000000000   ',
            '      0000      ',
            '      0000      ',
            ' 00000000000000 ',
            ' 00000000000000 ',
            '      0000      ',
            '      0000      ',
            '      0000      ',
            '      0000      ',
            '      0000      ',
            '      0000      ',
            '     00000      ',
            '    000 00   00 ',
            '  0000  0000000 ',
            ' 000    0000000 ',
            '                '],
        [[1,1],[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,3],[1,4],[1,4],[1,4],[1,4],[1,5],[1,7],[1,7],[1,12],[2,2],[2,2],[2,3],[2,4],[2,5]]],
    [
        [
            '  00       0    ',
            '          00    ',
            ' 0000      00   ',
            '  0000000   0000',
            ' 000   00   0000',
            ' 000  0000000000',
            '0000  0 00000000',
            '0   000 0000 000',
            '0 000   0000 000',
            '  000   0000  00',
            '  000  00000   0',
            '  000000        ',
            '     000000     ',
            ' 00  00   00    ',
            ' 00  00    0    ',
            ' 00  00    0    '],
        [[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,3],[1,4],[1,4],[1,4],[1,7],[2,2],[2,2],[2,3],[2,5],[3,3],[3,4],[4,4],[4,5]]],
    [
        [
            '                    ',
            '        0000        ',
            '       000000       ',
            '      00000000      ',
            '      00000000      ',
            '      00000000      ',
            '      00000000      ',
            '      00 00 00      ',
            '     0000000000     ',
            '    000000000000    ',
            '   00000000000000   ',
            '  0000000000000000  ',
            '  0000000000000000  ',
            ' 00  0        0  00 ',
            ' 0   0        0   0 ',
            ' 0   0        0   0 ',
            '        0  0        ',
            '        0000        ',
            '         00         ',
            '                    '],
        [[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,3],[1,3],[1,4],[1,5],[1,6],[1,7],[1,7],[1,8],[2,2],[2,2],[2,2],[2,3],[2,3],[2,7],[2,8],[3,3]]],
    [
        [
            '00       00         ',
            '00       00         ',
            '00       00    0000 ',
            '0000     000000000  ',
            '0000000000 00  000  ',
            '00         00  000  ',
            '00         00  000  ',
            ' 000000000000     0 ',
            '  0000  0   0000  0 ',
            '    000000000000  0 ',
            '    000000000000 000',
            '  0000 000000000 0  ',
            '  000000 0000000 0  ',
            '      0000       0  ',
            '                 0  ',
            '               000  ',
            '  0            00   ',
            ' 000      000000    ',
            ' 00       00        ',
            '   00   00000       '],
        [[1,1],[1,1],[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,4],[1,4],[1,4],[1,4],[1,6],[1,12],[2,2],[2,2],[2,2],[2,2],[2,3],[2,3],[2,4],[2,4],[2,5],[2,7],[3,5],[4,7]]]]

for board,pieces in fixed_tests:
    solution_validate(board,pieces,solve_puzzle(board[:],[x[:] for x in pieces]))
print('<COMPLETEDIN::>')

test.describe('60 RANDOM TESTS')
#RNG function
from random import randrange as RR

rnd_frags8x8 = [
    [[
        '  0     ',
        '  0     ',
        '00  00  ',
        '00      ',
        '00      ',
        '     00 ',
        '     0  ',
        ' 0      '],[[2,3],[1,2],[1,2],[1,2],[1,1],[1,1]]],
    [[
        '    0000',
        '00      ',
        '00    0 ',
        '00   0  ',
        '  00    ',
        '        ',
        '      0 ',
        '      0 '],[[2,3],[1,4],[1,2],[1,2],[1,1],[1,1]]],
    [[
        '0       ',
        '    0   ',
        '    0   ',
        '0   00  ',
        '00  0   ',
        '0   0   ',
        '0   0   ',
        '      00'],[[1,6],[1,3],[1,2],[1,1],[1,1],[1,1],[1,1]]],
    [[
        ' 0      ',
        ' 0      ',
        '     00 ',
        '  00    ',
        '  00    ',
        '  0     ',
        '     000',
        ' 0   00 '],[[2,2],[2,2],[1,2],[1,2],[1,1],[1,1],[1,1]]],
    [[
        '     00 ',
        '    0   ',
        '0   0 0 ',
        ' 0  0   ',
        ' 0 000  ',
        '        ',
        '      0 ',
        '      0 '],[[1,3],[1,3],[1,2],[1,2],[1,1],[1,1],[1,1],[1,1]]],
    [[
        '    0 0 ',
        '      00',
        ' 00    0',
        ' 00    0',
        '        ',
        '        ',
        '     0  ',
        '   000  '],[[2,2],[1,3],[1,3],[1,2],[1,1],[1,1]]],
    [[
        '      0 ',
        '      0 ',
        '      0 ',
        '   000  ',
        '   000  ',
        ' 00     ',
        '       0',
        '00    00'],[[2,3],[1,2],[1,2],[1,2],[1,2],[1,1],[1,1]]],
    [[
        '   00   ',
        '   00000',
        '        ',
        '0     0 ',
        '      0 ',
        '   0  0 ',
        '      0 ',
        '  0   0 '],[[2,2],[1,5],[1,3],[1,1],[1,1],[1,1]]],
    [[
        '0       ',
        '0       ',
        ' 0 00   ',
        '   00   ',
        '   00   ',
        '        ',
        ' 00   0 ',
        ' 00    0'],[[2,3],[2,2],[1,2],[1,1],[1,1],[1,1]]],
    [[
        '      00',
        '        ',
        ' 00     ',
        ' 00 000 ',
        '     00 ',
        '    0   ',
        '        ',
        '  000   '],[[2,2],[1,3],[1,3],[1,2],[1,1],[1,1],[1,1]]],
    [[
        '        ',
        '        ',
        '  0     ',
        '   00   ',
        '   0    ',
        ' 00 00 0',
        '    00  ',
        '    00  '],[[2,3],[1,2],[1,2],[1,1],[1,1],[1,1]]],
    [[
        '      0 ',
        ' 00     ',
        ' 00  0 0',
        '      0 ',
        '     00 ',
        '  00 0  ',
        '        ',
        '        '],[[2,2],[1,2],[1,2],[1,2],[1,1],[1,1],[1,1]]],
    [[
        '000000  ',
        '        ',
        '     0  ',
        ' 0      ',
        ' 0      ',
        ' 0 00   ',
        '   000  ',
        '     0  '],[[2,2],[1,6],[1,3],[1,1],[1,1],[1,1]]],
    [[
        ' 00   0 ',
        ' 00   0 ',
        '      0 ',
        '        ',
        '   0    ',
        '00   00 ',
        '00      ',
        '00      '],[[2,3],[2,2],[1,3],[1,1],[1,1],[1,1]]],
    [[
        '     00 ',
        ' 0   00 ',
        ' 0 0    ',
        ' 0 0 00 ',
        ' 0      ',
        '    00  ',
        '    00  ',
        '    00  '],[[2,3],[2,2],[1,4],[1,2],[1,1],[1,1]]],
    [[
        '       0',
        '0       ',
        '00   0  ',
        '   000  ',
        '   000  ',
        '       0',
        '       0',
        '0       '],[[2,3],[1,2],[1,2],[1,1],[1,1],[1,1],[1,1]]],
    [[
        '        ',
        ' 00     ',
        '0 000   ',
        '0  0    ',
        '        ',
        '    0   ',
        '    000 ',
        ' 0  000 '],[[2,3],[1,3],[1,2],[1,2],[1,1],[1,1],[1,1]]],
    [[
        '   0   0',
        '   0    ',
        '       0',
        '      0 ',
        ' 000  0 ',
        ' 000  0 ',
        '0     0 ',
        '00      '],[[2,3],[1,4],[1,2],[1,2],[1,1],[1,1],[1,1]]],
    [[
        '        ',
        '000     ',
        '000     ',
        '      00',
        '    0  0',
        '     0  ',
        '     00 ',
        '       0'],[[2,3],[1,2],[1,2],[1,1],[1,1],[1,1],[1,1]]],
    [[
        '        ',
        '    00  ',
        '  0 00  ',
        '  0    0',
        ' 00    0',
        '  0  000',
        '0       ',
        '  0     '],[[2,2],[1,4],[1,3],[1,2],[1,1],[1,1],[1,1]]]]

rnd_frags8x16 = [
    [[
        '                ',
        '    000    000  ',
        '    000  00     ',
        ' 00       0  000',
        '     00   0     ',
        '    00    0   0 ',
        '    00     0    ',
        '                '],[[2,3],[2,2],[1,4],[1,3],[1,3],[1,2],[1,2],[1,1],[1,1],[1,1]]],
    [[
        '               0',
        '            0  0',
        '0              0',
        ' 0000    000    ',
        ' 0000      00   ',
        '0          00   ',
        '0        0 00   ',
        '          0 00  '],[[2,4],[2,3],[1,3],[1,3],[1,2],[1,2],[1,1],[1,1],[1,1],[1,1]]],
    [[
        '000         0   ',
        '  00    00 00   ',
        '        00 00   ',
        '00              ',
        '0               ',
        '  0           0 ',
        '  0  00 0     00',
        '  0  0         0'],[[2,2],[2,2],[1,3],[1,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,1],[1,1],[1,1],[1,1]]],
    [[
        '000             ',
        '                ',
        ' 0  00    0000  ',
        ' 0  00       0  ',
        ' 0  00      00  ',
        ' 0        0 0   ',
        ' 0         0    ',
        '           0    '],[[2,3],[1,5],[1,4],[1,3],[1,2],[1,2],[1,2],[1,1]]],
    [[
        '              0 ',
        '     00       0 ',
        '   0 00       0 ',
        '   0       00 0 ',
        '0000       00 0 ',
        '    0000000     ',
        '     00         ',
        '     00         '],[[2,2],[2,2],[1,7],[1,5],[1,3],[1,3],[1,2],[1,2]]],
    [[
        '           0    ',
        '            0000',
        '0            0  ',
        '0000         00 ',
        ' 000   0     00 ',
        ' 000   0        ',
        '       0   00   ',
        '                '],[[3,3],[2,2],[1,4],[1,3],[1,2],[1,2],[1,1],[1,1]]],
    [[
        '          000000',
        '   0            ',
        ' 00          00 ',
        ' 00    0  000   ',
        '000     0       ',
        '0  0        00  ',
        '          0 00  ',
        '          0     '],[[2,3],[2,2],[1,6],[1,3],[1,2],[1,2],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1]]],
    [[
        '      0         ',
        '0             0 ',
        '0   0   00      ',
        '00  00  00      ',
        ' 0  0  00       ',
        '00000        000',
        '    0    0   000',
        '      00   0    '],[[3,2],[2,2],[1,5],[1,4],[1,3],[1,2],[1,2],[1,2],[1,1],[1,1],[1,1],[1,1],[1,1]]]]

rnd_frags16x16 = [
    [[
        '            000 ',
        '          00    ',
        '          00    ',
        '          00    ',
        '          00    ',
        '  0       00    ',
        '00        00    ',
        '      0   00    ',
        '      0  000    ',
        '      0         ',
        '                ',
        '0               ',
        '0     000      0',
        '  00   00     00',
        '  00           0',
        '    00       0  '],[[2,8],[2,2],[1,3],[1,3],[1,3],[1,2],[1,2],[1,2],[1,2],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1]]],
    [[
        '      000 0000  ',
        '  0         00  ',
        '  0    0        ',
        '  0             ',
        '                ',
        '      0    00   ',
        '              0 ',
        '             0  ',
        '      0         ',
        '  00000    00   ',
        '      0         ',
        '      0    00   ',
        '    00     00   ',
        '           00  0',
        '           00   ',
        '         0   00 '],[[2,4],[2,2],[1,4],[1,4],[1,3],[1,3],[1,2],[1,2],[1,2],[1,2],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1]]],
    [[
        ' 000            ',
        ' 000            ',
        '   000        00',
        '  0           00',
        '  0        000  ',
        '           000  ',
        '           000  ',
        '                ',
        '0    0    00000 ',
        '0    0     0    ',
        '0    0          ',
        '0   0           ',
        '                ',
        '                ',
        '         00  0 0',
        '          0  0 0'],[[3,3],[2,3],[2,2],[1,5],[1,4],[1,3],[1,3],[1,2],[1,2],[1,2],[1,2],[1,1],[1,1],[1,1]]],
    [[
        '                ',
        '                ',
        '0            00 ',
        '    0        00 ',
        '             00 ',
        ' 0         0 00 ',
        ' 0         0    ',
        '  0    0        ',
        '       0 00     ',
        '         000    ',
        '       0 000    ',
        '      0 0  0    ',
        '      000  0    ',
        '           0    ',
        '                ',
        '  000           '],[[2,4],[2,3],[1,5],[1,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,1],[1,1],[1,1],[1,1],[1,1]]]]

#random test generator
def select(group):
    r1,r2 = [],[]
    for grp,n in group:
        picked = {}
        while n:
            q = RR(len(grp))
            v = grp[q]
            if picked.get(q): continue
            picked[q] = True
            r1.append(v[0][:])
            r2.extend(v[1])
            n -= 1
    r1 = [reversed(e) if RR(2) else e for e in r1]
    r2 = [e[:] for e in r2]
    return [r1,r2]

def gen_tests(n):
    board = ['']*n
    if n == 24:
        v = RR(3)
        if v == 0:
            selection,pieces = select([[rnd_frags16x16,1],[rnd_frags8x8,5]])
            for i,e in enumerate(selection[0]): board[i] += e
            for e in selection[1:3]:
                for c,v in enumerate(e): board[c+16] += v
            for i,e in enumerate(selection[3:]):
                for c,v in enumerate(e): board[i*8+c] += v
        elif v == 1:
            selection,pieces = select([[rnd_frags8x16,3],[rnd_frags8x8,3]])
            for i in range(2):
                csel = selection[3:] if i else selection[0:3]
                for c,v in enumerate(csel):
                    for q,g in enumerate(v): board[c*8+q] += g
        else:
            selection,pieces = select([[rnd_frags8x16,2],[rnd_frags8x8,5]])
            for i,e in enumerate(selection[0:2]):
                for c,v in enumerate(e): board[i*8+c] += v
            for i,e in enumerate(selection[2:4]):
                for c,v in enumerate(e): board[c+16] += v
            for i,e in enumerate(selection[4:]):
                for c,v in enumerate(e): board[i*8+c] += v
    elif n == 16:
        v = RR(3)
        if v == 0:
            selection,pieces = select([[rnd_frags16x16,1]])
            for i,e in enumerate(selection[0]): board[i] += e
        elif v == 1:
            selection,pieces = select([[rnd_frags8x16,2]])
            for i,e in enumerate(selection):
                for c,v in enumerate(e): board[i*8+c] += v
        else:
            selection,pieces = select([[rnd_frags8x8,4]])
            for i,e in enumerate(selection):
                for c,v in enumerate(e): board[int(i/2)*8+c] += v
    else:
        selection,pieces = select([[rnd_frags8x8,1]])
        if RR(2): selection.reverse()
        for i,e in enumerate(selection[0]): board[i] += e
    return (board,pieces)

#fixed tests, randomly queued
fixed_randoms = [
    [
        [
            '        0   ',
            '         0  ',
            '         0  ',
            '   00  000  ',
            ' 0000  00   ',
            ' 0 000000   ',
            '00000  00   ',
            '   000 00   ',
            '   00   0   ',
            '   0    0   ',
            '   0    0000',
            '   00     00'],[[1,1],[1,1],[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,3],[1,4],[1,4],[2,2],[2,5]]],
    [
        [
            '0000        ',
            '   00000    ',
            '   0 000    ',
            '000000 000  ',
            '000000 0 000',
            '0000000000 0',
            '000 000000 0',
            '000000 00 0 ',
            '  0 000 0000',
            ' 0000 00 0 0',
            '    000 0000',
            '    000 0   '],
        [[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,3],[1,4],[1,4],[1,4],[2,2],[2,3],[2,3],[2,4],[2,5],[3,3]]],
    [
        [
            '         00     ',
            '         00     ',
            '         00     ',
            '   00000000     ',
            '   00000 000    ',
            '   000 0   0    ',
            '000000 000000000',
            '000000 000000000',
            '000 00 00000000 ',
            '000000 00000000 ',
            '0 0000 0000000  ',
            '  00 0 0000000  ',
            '  00 000000000  ',
            '  00 000   00   ',
            '  0000 000000   ',
            '           0    '],
        [[1,1],[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,4],[1,4],[1,5],[2,3],[2,4],[2,5],[2,5],[2,7],[3,3],[5,5]]],
    [
        [
            '       0            ',
            '       0  0000000000',
            '       0000  0000000',
            '       0000000      ',
            '      00000000000   ',
            '000  0000    0000   ',
            '000 000       000   ',
            '000 00        000   ',
            '000 00 000000 000   ',
            '    000000000 000   ',
            ' 0000 0  0  0 000   ',
            '00  000000000 000   ',
            '00  00000000  000   ',
            '00  00 00000000000  ',
            '00   000        000 ',
            ' 0   00 0   000 000 ',
            ' 0   00 00000 00000 ',
            ' 0      000000  000 ',
            ' 0       0000       ',
            ' 0       0000       '],[[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,4],[1,4],[1,4],[1,5],[1,11],[2,2],[2,3],[2,3],[2,4],[2,4],[2,4],[2,6],[2,6],[2,7],[3,4],[3,4],[3,9],[4,4]]],
    [
        [
            '00         0 0  ',
            '00  0 000   0  0',
            '00   0 00 00  0 ',
            '00  0 0  0   0  ',
            '0000 0000 0 0 0 ',
            '  00 0000  0 0  ',
            '  0  000 0  0 00',
            ' 000 0000  0 0  ',
            ' 000 0000 0 0 0 ',
            ' 000 0 0  00  0 ',
            ' 000 0000000 000',
            ' 0 00    000    ',
            ' 00 000000  0 0 ',
            ' 00 00000 0  0  ',
            '00 0 0000 00  0 ',
            '     0000    0  '],
        [[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,4],[1,4],[1,5],[2,2],[2,2],[2,3],[2,4],[2,4],[2,5],[4,4]]],
    [
        [
            '   00  0       0   0  0 ',
            '   00  0      0000000000',
            '    000000    0000000000',
            '  00000       0000000000',
            '   0000000    0000000000',
            '       0      0000000000',
            '000000000     0000000000',
            '000000000     0000000000',
            '0000000 000   0000000000',
            '       0000   0000000000',
            '      00000   0000000000',
            '00000000000 000    0000 ',
            '00000000000 00   00 0   ',
            '00000000000 00000 00    ',
            ' 000 000    00000 0 0   ',
            '   00000  000000000  000',
            '   00     000  000000000',
            '   0000   0000000000000 ',
            '   0000   000000     00 ',
            '     00000000000     000',
            '        00000000 00  000',
            '        0000000 000  000',
            '        00000000000  00 ',
            '              00000  00 '],
        [[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,4],[1,4],[1,4],[1,4],[1,5],[1,5],[1,6],[2,2],[2,2],[2,2],[2,2],[2,3],[2,3],[2,3],[2,4],[2,4],[2,4],[2,4],[2,4],[2,5],[2,9],[3,6],[3,7],[4,5],[4,6],[10,10]]],
    [
        [
            '      00           00   ',
            '      00           00 00',
            '      00  000000   00 00',
            '      00000  000000     ',
            '   00             00    ',
            '   00             00    ',
            ' 0000          00 00    ',
            ' 0000     0   00  00    ',
            ' 00 000   0  00       00',
            ' 00       0  00000   00 ',
            ' 00       0000        00',
            ' 000000000   000       0',
            '   0000000        000000',
            '   0000000        000000',
            '   0000000 0000000000000',
            '   0000000 0000000      ',
            '   000000000     00  0  ',
            '000000000000     00 0   ',
            '00        00   000000   ',
            '00       000      000   ',
            '  00000000          0000',
            '                     000',
            '                 00  000',
            '    0           000     '],[[7,7],[3,6],[3,3],[2,7],[2,6],[2,4],[2,4],[2,4],[2,3],[2,3],[2,3],[2,2],[2,2],[2,2],[2,2],[1,8],[1,6],[1,6],[1,5],[1,5],[1,4],[1,4],[1,3],[1,3],[1,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1]]],
    [
        [
            '       00000      00    ',
            '     00  00000    00    ',
            '     00  00000    00    ',
            '     00  000000000000000',
            '  00000       0000000000',
            '  00000       0000000000',
            '000   0 0     0000000000',
            '00000000      0000000000',
            '000    00     000  0    ',
            '000           00000     ',
            '    000       0         ',
            '    000    00 0         ',
            '    000    00 0      000',
            '           00 0000000000',
            '000000     00 0000000000',
            '00     00000         000',
            '0000    00  0           ',
            '  000   000000          ',
            '  00        000         ',
            '  00         00         ',
            '     0        00        ',
            '  0000        00        ',
            '    00         00       ',
            '     0         00000    '],[[5,10],[3,5],[3,4],[3,4],[3,3],[2,6],[2,4],[2,4],[2,4],[2,3],[2,3],[2,2],[2,2],[2,2],[2,2],[2,2],[1,7],[1,6],[1,6],[1,5],[1,5],[1,4],[1,3],[1,3],[1,3],[1,3],[1,2],[1,2],[1,2],[1,2],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1]]],
    [
        [
            '            0     00    ',
            '     0    0 0      00000',
            '000  0  00  0      00000',
            '000  000    000      0  ',
            '000000  000 000         ',
            '000     000  000     000',
            '000     000 0000     000',
            '       00       00 0000 ',
            '  00    0000000 000  0  ',
            '  0 000           0  0  ',
            ' 00  0   00       0  0  ',
            ' 00  0   0000000  0  0 0',
            ' 00    000     000000   ',
            '       000      000 0   ',
            ' 0000  000000000000 0   ',
            ' 0     000 00000000 0   ',
            ' 0    00   00000  0 0   ',
            ' 0         00000  000   ',
            '   0000    00000  0 0   ',
            '        00 00000  0 0   ',
            '000   0000        0000  ',
            '000   0000 0   0    000 ',
            ' 00  00    0   000000   ',
            '     00    0   0    0   '],[[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,5],[1,5],[1,5],[1,12],[2,2],[2,2],[2,2],[2,2],[2,3],[2,3],[2,3],[2,3],[2,3],[2,5],[3,3],[3,4],[3,4],[3,5],[5,6]]],
    [
        [
            '  0    0  00000   0   0 ',
            '  0    00000000  00   0 ',
            ' 0 0    0      0 0    0 ',
            '0 0 0   0   00  000 000 ',
            '  0   0 000   0     00  ',
            '  0   0  00    0    00  ',
            '  000 000  00  0     00 ',
            '  000  00  00    00000  ',
            '  00   0     00  00000  ',
            '  00   00000 00  00000  ',
            '   00  000     00  00   ',
            '     00 00000  00  00  0',
            '    0000 0000    00    0',
            '00000     000    00  000',
            '   000       000     000',
            ' 0 000 0000 000000000000',
            '   000000   0000  000000',
            '   000      0000  000   ',
            '   00000000  00 0 000   ',
            '  000000000  00   000   ',
            '  000000000  00   000000',
            '  000000000  00   000   ',
            '  0       00 00   000   ',
            '  0           0000      '],[[4,8],[3,7],[3,5],[3,4],[3,4],[3,3],[2,9],[2,5],[2,3],[2,3],[2,3],[2,2],[2,2],[2,2],[2,2],[2,2],[2,2],[2,2],[2,2],[1,5],[1,5],[1,5],[1,4],[1,4],[1,4],[1,4],[1,4],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1]]]
]

fix_rand_seq = [RR(6)+6*i+20 for i in range(len(fixed_randoms))]
test_groups = [[20,8],[20,16],[20,24]]
frn,tc,final_count = 0,0,0

def test_func(z):
    global frn,tc
    qty,size = z
    failcount = 0
    while qty:
        if frn < len(fix_rand_seq) and tc == fix_rand_seq[frn]:
            board,pieces = fixed_randoms[frn]
            frn += 1
        else: board,pieces = gen_tests(size)
        tc += 1
        test_clone = [board[:],[x[:] for x in pieces]]
        rez = solution_validate(board,pieces,solve_puzzle(*test_clone))
        if rez == False:
            failcount += 1
            if failcount > 2: return False
        qty -= 1
    return failcount == 0

for i in range(len(test_groups)):
    if test_func(test_groups[i]) == False:
        print('You have lost the wager. You must now spend the remainder of your life as a stranger\'s butler.\n\nUnbeknownst to you, the hyenas laugh at your misfortune.')
        break
    final_count += 1

if final_count == 3:
    print('Congratulations! You\'ve passed all the tests!\nThe mysterious stranger forfeits the talisman and disappears. Triumphant, you ride off into the sunset atop a pair of dolphins.')
print('<COMPLETEDIN::>')
