USING: namespaces regexp ;
IN: kata

SYMBOL: solution
R/ ^(?:0|1(?:(?:(?:1(?:(?:(?:01*0)0))*(?:(?:(?:01*0)1)0))|(?:0|1(?:(?:(?:01*0)0))*(?:(?:(?:01*0)1)1))(?:(?:(?:(?:0|11)1)|(?:10)(?:(?:(?:01*0)0))*(?:(?:(?:01*0)1)1)))*(?:(?:(?:0|11)0)|(?:10)(?:(?:(?:01*0)0))*(?:(?:(?:01*0)1)0))))*(?:(?:1(?:(?:(?:01*0)0))*1)|(?:0|1(?:(?:(?:01*0)0))*(?:(?:(?:01*0)1)1))(?:(?:(?:(?:0|11)1)|(?:10)(?:(?:(?:01*0)0))*(?:(?:(?:01*0)1)1)))*(?:(?:10)(?:(?:(?:01*0)0))*1)))+$/ solution set-global

___________________________
USING: namespaces regexp ;
IN: kata

SYMBOL: solution
R/ ^(0|111|100((1|00)0)*011|(101|100((1|00)0)*(1|00)1)(1((1|00)0)*(1|00)1)*(01|1((1|00)0)*011)|(110|100((1|00)0)*010|(101|100((1|00)0)*(1|00)1)(1((1|00)0)*(1|00)1)*(00|1((1|00)0)*010))(1|0(1((1|00)0)*(1|00)1)*(00|1((1|00)0)*010))*0(1((1|00)0)*(1|00)1)*(01|1((1|00)0)*011))+$/ solution set-global

_________________________
USING: namespaces regexp multiline ;
IN: kata

! to translate a finite state machine into regex.
! (and substituted every + for |)
! Here's the finite state machine:
/*
#states
start
s0
s1
s2
s3
s4
s5
s6
#initial
start
#accepting
s0
#alphabet
0
1
#transitions
start:0>s0
s0:0>s0
s1:0>s2
s2:0>s4
s3:0>s6
s4:0>s1
s5:0>s3
s6:0>s5
start:1>s1
s0:1>s1
s1:1>s3
s2:1>s5
s3:1>s0
s4:1>s2
s5:1>s4
s6:1>s6
*/

! aaand the regex...
SYMBOL: solution
R/ 0|1((1(01*00)*01*01|(0|1(01*00)*01*011)((0|1(1|0(01*00)*01*01))1)*(0|1(1|0(01*00)*01*01)))0)*(1|(0|1(01*00)*01*011)((0|1(1|0(01*00)*01*01))1)*10)(01*00)*1|(0|1((1(01*00)*01*01|(0|1(01*00)*01*011)((0|1(1|0(01*00)*01*01))1)*(0|1(1|0(01*00)*01*01)))0)*(1|(0|1(01*00)*01*011)((0|1(1|0(01*00)*01*01))1)*10)(01*00)*1)(0|1((1(01*00)*01*01|(0|1(01*00)*01*011)((0|1(1|0(01*00)*01*01))1)*(0|1(1|0(01*00)*01*01)))0)*(1|(0|1(01*00)*01*011)((0|1(1|0(01*00)*01*01))1)*10)(01*00)*1)*(0|$|1((1(01*00)*01*01|(0|1(01*00)*01*011)((0|1(1|0(01*00)*01*01))1)*(0|1(1|0(01*00)*01*01)))0)*(1|(0|1(01*00)*01*011)((0|1(1|0(01*00)*01*01))1)*10)(01*00)*1)/ solution set-global
