536602df5d0266e7b0000d31


class Morse
  def self.encode(message)
    binary = message.chars.map { |c| @alpha[c] }.join('000')
    hex = binary.scan(/.{1,32}/).map { |x| x.ljust(32, '0').to_i(2) }
    hex.pack("V*").unpack("l*")
  end

  def self.decode(array)
    morse = array.pack('N*').unpack("B*").first.gsub(/0+$/, '000')
    morse.scan(/(.+?)000/).flatten.map { |m| @binary[m] }.join
  end

  @alpha={
  'A'=> '10111',
  'B'=> '111010101',
  'C'=> '11101011101',
  'D'=> '1110101',
  'E'=> '1',
  'F'=> '101011101',
  'G'=> '111011101',
  'H'=> '1010101',
  'I'=> '101',
  'J'=> '1011101110111',
  'K'=> '111010111',
  'L'=> '101110101',
  'M'=> '1110111',
  'N'=> '11101',
  'O'=> '11101110111',
  'P'=> '10111011101',
  'Q'=> '1110111010111',
  'R'=> '1011101',
  'S'=> '10101',
  'T'=> '111',
  'U'=> '1010111',
  'V'=> '101010111',
  'W'=> '101110111',
  'X'=> '11101010111',
  'Y'=> '1110101110111',
  'Z'=> '11101110101',
  '0'=> '1110111011101110111',
  '1'=> '10111011101110111',
  '2'=> '101011101110111',
  '3'=> '1010101110111',
  '4'=> '10101010111',
  '5'=> '101010101',
  '6'=> '11101010101',
  '7'=> '1110111010101',
  '8'=> '111011101110101',
  '9'=> '11101110111011101',
  '.'=> '10111010111010111',
  ','=> '1110111010101110111',
  '?'=> '101011101110101',
  "'" => '1011101110111011101',
  '!'=> '1110101110101110111',
  '/'=> '1110101011101',
  '('=> '111010111011101',
  ')'=> '1110101110111010111',
  '&'=> '10111010101',
  ':'=> '11101110111010101',
  ';'=> '11101011101011101',
  '='=> '1110101010111',
  '+'=> '1011101011101',
  '-'=> '111010101010111',
  '_'=> '10101110111010111',
  '"'=> '101110101011101',
  '$'=> '10101011101010111',
  '@'=> '10111011101011101',
  ' '=> '0'}
  
  @binary = @alpha.invert
end
________________________________________________
class Morse
  def self.encode(message)
    bit_str = message.each_char.reduce('') { |bits, c| bits + "#{@alpha[c]}000" }

    0.upto(bit_str.length.fdiv(32).floor - 1).reduce([]) do |enc, _|
      enc << Morse.from_binary(bit_str.slice!(0..31))
    end + [Morse.from_binary(bit_str.ljust(32, '0'))]
  end

  def self.decode(array)
    array.map { |v| Morse.to_binary(v) }.join.split('0'*7).map do |word|
      word.split('0' * 3).map { |ch| @alpha.key(ch) }.join
    end.join(' ').rstrip
  end

  private

  def self.from_binary(str)
    value = -str[0].to_i * 2 ** (str.size - 1)
    str[1..-1].chars.reverse.each_with_index do |c, i|
      value += c.to_i * 2 ** i 
    end
    value
  end

  def self.to_binary(num)
    num < 0 ?
      num.bit_length.downto(0).map{|n| num[n] }.join.rjust(32, '1') :
      num.to_s(2).rjust(32, '0')
  end
    
  @alpha={
  'A'=> '10111',
  'B'=> '111010101',
  'C'=> '11101011101',
  'D'=> '1110101',
  'E'=> '1',
  'F'=> '101011101',
  'G'=> '111011101',
  'H'=> '1010101',
  'I'=> '101',
  'J'=> '1011101110111',
  'K'=> '111010111',
  'L'=> '101110101',
  'M'=> '1110111',
  'N'=> '11101',
  'O'=> '11101110111',
  'P'=> '10111011101',
  'Q'=> '1110111010111',
  'R'=> '1011101',
  'S'=> '10101',
  'T'=> '111',
  'U'=> '1010111',
  'V'=> '101010111',
  'W'=> '101110111',
  'X'=> '11101010111',
  'Y'=> '1110101110111',
  'Z'=> '11101110101',
  '0'=> '1110111011101110111',
  '1'=> '10111011101110111',
  '2'=> '101011101110111',
  '3'=> '1010101110111',
  '4'=> '10101010111',
  '5'=> '101010101',
  '6'=> '11101010101',
  '7'=> '1110111010101',
  '8'=> '111011101110101',
  '9'=> '11101110111011101',
  '.'=> '10111010111010111',
  ','=> '1110111010101110111',
  '?'=> '101011101110101',
  "'"=> '1011101110111011101',
  '!'=> '1110101110101110111',
  '/'=> '1110101011101',
  '('=> '111010111011101',
  ')'=> '1110101110111010111',
  '&'=> '10111010101',
  ':'=> '11101110111010101',
  ';'=> '11101011101011101',
  '='=> '1110101010111',
  '+'=> '1011101011101',
  '-'=> '111010101010111',
  '_'=> '10101110111010111',
  '"'=> '101110101011101',
  '$'=> '10101011101010111',
  '@'=> '10111011101011101',
  ' ' => '0'}
end
________________________________________________
class Morse
  @int_size = 32
  
  def self.encode(message)
    @alpha.values_at(*message.chars).join('000').scan(/.{1,#{@int_size}}/).map{|s| s.ljust(@int_size, '0').to_i(2)}.pack('L*').unpack('l*')
  end

  def self.decode(array)
    array.pack('l*').unpack('L*').map{|n| n.to_s(2).rjust(@int_size, '0')}.join.sub(/0+$/, '').split(/(?<=1)000|000(?=1)/).map{|v| @alpha.key(v)}.join
  end

  @alpha={
  'A'=> '10111',
  'B'=> '111010101',
  'C'=> '11101011101',
  'D'=> '1110101',
  'E'=> '1',
  'F'=> '101011101',
  'G'=> '111011101',
  'H'=> '1010101',
  'I'=> '101',
  'J'=> '1011101110111',
  'K'=> '111010111',
  'L'=> '101110101',
  'M'=> '1110111',
  'N'=> '11101',
  'O'=> '11101110111',
  'P'=> '10111011101',
  'Q'=> '1110111010111',
  'R'=> '1011101',
  'S'=> '10101',
  'T'=> '111',
  'U'=> '1010111',
  'V'=> '101010111',
  'W'=> '101110111',
  'X'=> '11101010111',
  'Y'=> '1110101110111',
  'Z'=> '11101110101',
  '0'=> '1110111011101110111',
  '1'=> '10111011101110111',
  '2'=> '101011101110111',
  '3'=> '1010101110111',
  '4'=> '10101010111',
  '5'=> '101010101',
  '6'=> '11101010101',
  '7'=> '1110111010101',
  '8'=> '111011101110101',
  '9'=> '11101110111011101',
  '.'=> '10111010111010111',
  ','=> '1110111010101110111',
  '?'=> '101011101110101',
  "'"=> '1011101110111011101',
  '!'=> '1110101110101110111',
  '/'=> '1110101011101',
  '('=> '111010111011101',
  ')'=> '1110101110111010111',
  '&'=> '10111010101',
  ':'=> '11101110111010101',
  ';'=> '11101011101011101',
  '='=> '1110101010111',
  '+'=> '1011101011101',
  '-'=> '111010101010111',
  '_'=> '10101110111010111',
  '"'=> '101110101011101',
  '$'=> '10101011101010111',
  '@'=> '10111011101011101',
  ' '=> '0'}
end
