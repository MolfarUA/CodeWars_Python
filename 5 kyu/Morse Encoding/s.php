536602df5d0266e7b0000d31


const MORSE_ALPHA = [
  'A'=> '10111',
  'B'=> '111010101',
  'C'=> '11101011101',
  'D'=> '1110101',
  'E'=> '1',
  'F'=> '101011101',
  'G'=> '111011101',
  'H'=> '1010101',
  'I'=> '101',
  'J'=> '1011101110111',
  'K'=> '111010111',
  'L'=> '101110101',
  'M'=> '1110111',
  'N'=> '11101',
  'O'=> '11101110111',
  'P'=> '10111011101',
  'Q'=> '1110111010111',
  'R'=> '1011101',
  'S'=> '10101',
  'T'=> '111',
  'U'=> '1010111',
  'V'=> '101010111',
  'W'=> '101110111',
  'X'=> '11101010111',
  'Y'=> '1110101110111',
  'Z'=> '11101110101',
  '0'=> '1110111011101110111',
  '1'=> '10111011101110111',
  '2'=> '101011101110111',
  '3'=> '1010101110111',
  '4'=> '10101010111',
  '5'=> '101010101',
  '6'=> '11101010101',
  '7'=> '1110111010101',
  '8'=> '111011101110101',
  '9'=> '11101110111011101',
  '.'=> '10111010111010111',
  ','=> '1110111010101110111',
  '?'=> '101011101110101',
  "'"=> '1011101110111011101',
  '!'=> '1110101110101110111',
  '/'=> '1110101011101',
  '('=> '111010111011101',
  ')'=> '1110101110111010111',
  '&'=> '10111010101',
  ':'=> '11101110111010101',
  ';'=> '11101011101011101',
  '='=> '1110101010111',
  '+'=> '1011101011101',
  '-'=> '111010101010111',
  '_'=> '10101110111010111',
  '"'=> '101110101011101',
  '$'=> '10101011101010111',
  '@'=> '10111011101011101',
  ' '=> '0' // Technically is 7 0-bits, but we assume that a space will always be between two other characters
];

function morseEncode($str){
  
  $char = str_split($str);
  foreach($char as &$c){
    $c=MORSE_ALPHA[$c];
  }
  $bin = implode('000', $char);
  $bin = str_split($bin, 32);
  foreach($bin as &$b){
    
    $dec =str_pad($b, 32, 0);
    $d = bindec($dec);
    if($dec[0]==1){
      $b = $d - (2 ** 32);
    }else{
      $b = $d;
    }
  }
  return $bin;
}

function morseDecode($integerArray){
  
  foreach($integerArray as &$b){
    if($b < 0){
      $b = (2 ** 32) + $b;
    }
    $b = str_pad(decbin($b), 32, '0', STR_PAD_LEFT);
  }
  $char = explode('000', strval(implode($integerArray)));
  foreach($char as &$c){
    
    $c = strval($c);
    if($c==''){
      
      $c = ' ';
    }else{
      
      $c = array_search($c, MORSE_ALPHA);
    }
  }
  $char = implode($char);
  return trim($char); 
}
________________________________________________
const MORSE_ALPHA = [
    'A' => '10111',
    'B' => '111010101',
    'C' => '11101011101',
    'D' => '1110101',
    'E' => '1',
    'F' => '101011101',
    'G' => '111011101',
    'H' => '1010101',
    'I' => '101',
    'J' => '1011101110111',
    'K' => '111010111',
    'L' => '101110101',
    'M' => '1110111',
    'N' => '11101',
    'O' => '11101110111',
    'P' => '10111011101',
    'Q' => '1110111010111',
    'R' => '1011101',
    'S' => '10101',
    'T' => '111',
    'U' => '1010111',
    'V' => '101010111',
    'W' => '101110111',
    'X' => '11101010111',
    'Y' => '1110101110111',
    'Z' => '11101110101',
    '0' => '1110111011101110111',
    '1' => '10111011101110111',
    '2' => '101011101110111',
    '3' => '1010101110111',
    '4' => '10101010111',
    '5' => '101010101',
    '6' => '11101010101',
    '7' => '1110111010101',
    '8' => '111011101110101',
    '9' => '11101110111011101',
    '.' => '10111010111010111',
    ',' => '1110111010101110111',
    '?' => '101011101110101',
    "'" => '1011101110111011101',
    '!' => '1110101110101110111',
    '/' => '1110101011101',
    '(' => '111010111011101',
    ')' => '1110101110111010111',
    '&' => '10111010101',
    ':' => '11101110111010101',
    ';' => '11101011101011101',
    '=' => '1110101010111',
    '+' => '1011101011101',
    '-' => '111010101010111',
    '_' => '10101110111010111',
    '"' => '101110101011101',
    '$' => '10101011101010111',
    '@' => '10111011101011101',
    ' ' => '0' // Technically is 7 0-bits, but we assume that a space will always be between two other characters
];

function morseEncode($str)
{
    $str = strtoupper($str);
    $strArr = str_split($str);

    $bstr = '';
    foreach ($strArr as $item) {
        $bstr .= MORSE_ALPHA[$item];
        $bstr .= '000';
    }

    $bstr = substr($bstr, 0, -3);

    $len = strlen($bstr);

    $res = [];

    $i = 0;
    while ($i * 32 <= $len) {
        $subStr = substr($bstr, $i * 32, 32);
        if (strlen($subStr) < 32) {
            $subStr = str_pad($subStr, 32, '0', STR_PAD_RIGHT);
        }

        $first = substr($subStr, 0, 1);

        $res[] = bindec(substr($subStr, 1)) + (-1 * pow(2, 31) * $first);
        $i++;
    }

    return $res;
}


function morseDecode($integerArray)
{
    $bin = '';
    foreach ($integerArray as $int) {
        $bin64 = str_pad(decbin($int), '64', '0', STR_PAD_LEFT);
        $bin .= substr($bin64, 32);
    }
    $binStr = trim($bin, '0');

    $res = '';
    $map = array_flip(MORSE_ALPHA);
    foreach (explode('0000000', $binStr) as $item) {
        foreach (explode('000', $item) as $val) {
            $res .= $map[$val];
        }
        $res .= ' ';
    }
    return trim($res);
}
________________________________________________
function morseEncode( $str) {
//code here
  for ($i=0;$i<strlen($str);$i++) {
    $z=MORSE_ALPHA[$str[$i]].'000';
    $a.=$z;
  }
  $a=substr_replace($a,'',-3,3);
  while(strlen($a)%32!==0) {
    $a.='0';
  }
  for ($j=0;$j<strlen($a)/32;$j++) {
    $q=substr($a,32*$j,32);
    $z=($q[0]==1)?bindec(substr($q,1,31))-2147483648:bindec(substr($q,1,31));
    $e[]=$z;
  } 
    return $e;
}

function morseDecode($integerArray) {
  $z='';
  foreach($integerArray as $d) {
    $q=($d<0)?decbin($d+2147483648):decbin($d);
    while(strlen($q)<31) {
      $q='0'.$q;
    }
    if (strlen($q)<32) {
    $q=($d<0)?'1'.$q:'0'.$q;
      }
    $z.=$q;
  }
  while ($z[strlen($z)-1]==0) 
    {
    $z=substr($z, 0, strlen($z)-1);
    }
  $rez='';
  while(strstr($z,'000')) {
    $q=strstr($z,'000',true);
    if ($q==='') $rez.=' ';
    $rez.=array_keys(MORSE_ALPHA ,$q)[0];
    $z=substr($z,strlen($q)+3); 
  }
  $rez.=array_keys(MORSE_ALPHA ,$z)[0];
  return $rez;
}

const MORSE_ALPHA = [
  'A'=> '10111',
  'B'=> '111010101',
  'C'=> '11101011101',
  'D'=> '1110101',
  'E'=> '1',
  'F'=> '101011101',
  'G'=> '111011101',
  'H'=> '1010101',
  'I'=> '101',
  'J'=> '1011101110111',
  'K'=> '111010111',
  'L'=> '101110101',
  'M'=> '1110111',
  'N'=> '11101',
  'O'=> '11101110111',
  'P'=> '10111011101',
  'Q'=> '1110111010111',
  'R'=> '1011101',
  'S'=> '10101',
  'T'=> '111',
  'U'=> '1010111',
  'V'=> '101010111',
  'W'=> '101110111',
  'X'=> '11101010111',
  'Y'=> '1110101110111',
  'Z'=> '11101110101',
  '0'=> '1110111011101110111',
  '1'=> '10111011101110111',
  '2'=> '101011101110111',
  '3'=> '1010101110111',
  '4'=> '10101010111',
  '5'=> '101010101',
  '6'=> '11101010101',
  '7'=> '1110111010101',
  '8'=> '111011101110101',
  '9'=> '11101110111011101',
  '.'=> '10111010111010111',
  ','=> '1110111010101110111',
  '?'=> '101011101110101',
  "'"=> '1011101110111011101',
  '!'=> '1110101110101110111',
  '/'=> '1110101011101',
  '('=> '111010111011101',
  ')'=> '1110101110111010111',
  '&'=> '10111010101',
  ':'=> '11101110111010101',
  ';'=> '11101011101011101',
  '='=> '1110101010111',
  '+'=> '1011101011101',
  '-'=> '111010101010111',
  '_'=> '10101110111010111',
  '"'=> '101110101011101',
  '$'=> '10101011101010111',
  '@'=> '10111011101011101',
  ' '=> '0' // Technically is 7 0-bits, but we assume that a space will always be between two other characters
];
